def n_queens(N):
    def solve(row, board):
        if row == N:
            solutions.append(board[:])  # Save a valid solution
            return
        for col in range(N):
            if all(board[i] != col and abs(board[i] - col) != row - i for i in range(row)):  # Check safety
                board[row] = col  # Place the queen
                solve(row + 1, board)  # Recurse to place the next queen
                board[row] = -1  # Backtrack

    solutions = []
    solve(0, [-1] * N)  # Initialize the board and start solving
    return solutions

# Example usage
N = 4
solutions = n_queens(N)
print(f"Number of solutions for {N}-Queens: {len(solutions)}")
for solution in solutions:
    for row in solution:
        print(' '.join('Q' if col == row else '.' for col in range(N)))
    print()
